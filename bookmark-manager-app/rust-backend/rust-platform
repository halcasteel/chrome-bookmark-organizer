#!/bin/bash

# Master Control Script for Rust Microservices Platform

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# Add cargo to PATH if not already there
if ! command -v cargo &> /dev/null && [ -x "$HOME/.cargo/bin/cargo" ]; then
    export PATH="$HOME/.cargo/bin:$PATH"
fi

# Script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

# Create necessary directories
mkdir -p logs backups

# ASCII Art Banner
show_banner() {
    echo -e "${PURPLE}"
    cat << "EOF"
    ____            __     ____  __      __  ____                   
   / __ \__  ______/ /_   / __ \/ /___ _/ /_/ __/___  _________ ___ 
  / /_/ / / / / __  __/  / /_/ / / __ `/ __/ /_/ __ \/ ___/ __ `__ \
 / _, _/ /_/ (__  ) /_  / ____/ / /_/ / /_/ __/ /_/ / /  / / / / / /
/_/ |_|\__,_/____/\__/ /_/   /_/\__,_/\__/_/  \____/_/  /_/ /_/ /_/ 
                                                                     
EOF
    echo -e "${NC}"
}

# Main menu
show_menu() {
    echo -e "${CYAN}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${BOLD}Main Menu${NC}"
    echo -e "${CYAN}═══════════════════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "  ${GREEN}1)${NC} Start Dependencies      ${YELLOW}(PostgreSQL & Redis)${NC}"
    echo -e "  ${GREEN}2)${NC} Start All Services      ${YELLOW}(Production mode with unified logging)${NC}"
    echo -e "  ${GREEN}3)${NC} Development Mode        ${YELLOW}(Auto-reload with cargo-watch)${NC}"
    echo -e "  ${GREEN}4)${NC} Service Manager         ${YELLOW}(Start/stop individual services)${NC}"
    echo -e "  ${GREEN}5)${NC} View Logs              ${YELLOW}(Real-time log viewer)${NC}"
    echo -e "  ${GREEN}6)${NC} Quick Test             ${YELLOW}(API endpoint testing)${NC}"
    echo -e "  ${GREEN}7)${NC} Run Benchmarks         ${YELLOW}(Performance testing)${NC}"
    echo -e "  ${GREEN}8)${NC} Database Tools         ${YELLOW}(Migrations and maintenance)${NC}"
    echo -e "  ${GREEN}9)${NC} Code Quality           ${YELLOW}(Linting and analysis)${NC}"
    echo -e "  ${GREEN}10)${NC} Docker Build          ${YELLOW}(Container deployment)${NC}"
    echo -e "  ${GREEN}11)${NC} Status Dashboard      ${YELLOW}(Service health overview)${NC}"
    echo -e "  ${GREEN}0)${NC} Exit"
    echo ""
}

# Function to check prerequisites
check_prerequisites() {
    local all_good=true
    
    echo -e "${CYAN}Checking prerequisites...${NC}"
    
    # Check Rust
    if command -v cargo &> /dev/null || [ -x "$HOME/.cargo/bin/cargo" ]; then
        if command -v cargo &> /dev/null; then
            echo -e "  ✓ Rust/Cargo: ${GREEN}$(cargo --version)${NC}"
        else
            echo -e "  ✓ Rust/Cargo: ${GREEN}$($HOME/.cargo/bin/cargo --version)${NC}"
            echo -e "    ${YELLOW}Note: Add ~/.cargo/bin to your PATH${NC}"
        fi
    else
        echo -e "  ✗ Rust/Cargo: ${RED}Not installed${NC}"
        all_good=false
    fi
    
    # Check PostgreSQL
    if nc -z localhost 5434 2>/dev/null; then
        echo -e "  ✓ PostgreSQL: ${GREEN}Running on port 5434${NC}"
    else
        echo -e "  ✗ PostgreSQL: ${RED}Not running on port 5434${NC}"
        echo -e "    ${YELLOW}Run: cd ~/BOOKMARKS/bookmark-manager-app && docker-compose up -d postgres${NC}"
        all_good=false
    fi
    
    # Check Redis
    if nc -z localhost 6382 2>/dev/null; then
        echo -e "  ✓ Redis: ${GREEN}Running on port 6382${NC}"
    else
        echo -e "  ✗ Redis: ${RED}Not running on port 6382${NC}"
        echo -e "    ${YELLOW}Run: cd ~/BOOKMARKS/bookmark-manager-app && docker-compose up -d redis${NC}"
        all_good=false
    fi
    
    # Check sqlx-cli
    if command -v sqlx &> /dev/null || [ -x "$HOME/.cargo/bin/sqlx" ]; then
        echo -e "  ✓ sqlx-cli: ${GREEN}Installed${NC}"
    else
        echo -e "  ✗ sqlx-cli: ${YELLOW}Not installed (optional)${NC}"
        echo -e "    ${YELLOW}Install: cargo install sqlx-cli --no-default-features --features native-tls,postgres${NC}"
    fi
    
    # Check cargo-watch
    if command -v cargo-watch &> /dev/null || [ -x "$HOME/.cargo/bin/cargo-watch" ]; then
        echo -e "  ✓ cargo-watch: ${GREEN}Installed${NC}"
    else
        echo -e "  ✗ cargo-watch: ${YELLOW}Not installed (optional for dev mode)${NC}"
        echo -e "    ${YELLOW}Install: cargo install cargo-watch${NC}"
    fi
    
    echo ""
    
    if [ "$all_good" = false ]; then
        echo -e "${RED}Some prerequisites are missing. Please install them first.${NC}"
        return 1
    fi
    
    return 0
}

# Database tools menu
database_tools() {
    echo -e "${CYAN}Database Tools${NC}"
    echo "1) Run migrations"
    echo "2) Reset database"
    echo "3) Create backup"
    echo "4) Restore backup"
    echo "5) Back to main menu"
    echo ""
    read -p "Select option: " db_choice
    
    case $db_choice in
        1)
            echo -e "${CYAN}Running migrations...${NC}"
            for service in auth bookmarks; do
                if [ -d "services/$service/migrations" ]; then
                    echo -e "${YELLOW}Running migrations for $service...${NC}"
                    (cd "services/$service" && sqlx migrate run)
                fi
            done
            ;;
        2)
            echo -e "${RED}This will delete all data! Are you sure? (y/N)${NC}"
            read -p "" confirm
            if [ "$confirm" = "y" ]; then
                echo -e "${YELLOW}Resetting database...${NC}"
                # Add database reset logic here
            fi
            ;;
        3)
            timestamp=$(date +%Y%m%d_%H%M%S)
            echo -e "${CYAN}Creating backup...${NC}"
            mkdir -p backups
            docker exec bookmark-manager-app_postgres_1 pg_dump -U postgres bookmarks > "backups/backup_$timestamp.sql"
            echo -e "${GREEN}Backup saved to backups/backup_$timestamp.sql${NC}"
            ;;
        4)
            echo -e "${CYAN}Available backups:${NC}"
            ls -1 backups/*.sql 2>/dev/null || echo "No backups found"
            ;;
    esac
    
    echo ""
    read -p "Press Enter to continue..."
}

# Performance monitor
performance_monitor() {
    echo -e "${CYAN}Performance Monitor${NC}"
    echo -e "${YELLOW}Collecting metrics...${NC}"
    echo ""
    
    # Show service ports and PIDs
    for port in 8001 8002 8003 8004 8080; do
        pid=$(lsof -ti:$port 2>/dev/null)
        if [ ! -z "$pid" ]; then
            service_name=$(ps -p $pid -o comm= 2>/dev/null)
            mem=$(ps -p $pid -o %mem= 2>/dev/null | xargs)
            cpu=$(ps -p $pid -o %cpu= 2>/dev/null | xargs)
            echo -e "Port $port: ${GREEN}$service_name${NC} (PID: $pid, CPU: ${cpu}%, MEM: ${mem}%)"
        else
            echo -e "Port $port: ${RED}Not running${NC}"
        fi
    done
    
    echo ""
    
    # Show system resources
    echo -e "${CYAN}System Resources:${NC}"
    echo -e "CPU Load: $(uptime | awk -F'load average:' '{print $2}')"
    echo -e "Memory: $(free -h | grep Mem | awk '{print "Used: " $3 " / Total: " $2}')"
    echo -e "Disk: $(df -h . | tail -1 | awk '{print "Used: " $3 " / Total: " $2 " (" $5 " used)"}')"
    
    echo ""
    read -p "Press Enter to continue..."
}

# Run tests
run_tests() {
    echo -e "${CYAN}Running tests...${NC}"
    echo ""
    
    # Unit tests
    echo -e "${YELLOW}Running unit tests...${NC}"
    cargo test --all
    
    # Integration tests
    echo -e "${YELLOW}Running integration tests...${NC}"
    # Add integration test commands here
    
    echo ""
    read -p "Press Enter to continue..."
}

# Build release
build_release() {
    echo -e "${CYAN}Building release binaries...${NC}"
    echo -e "${YELLOW}This may take several minutes...${NC}"
    echo ""
    
    cargo build --release
    
    if [ $? -eq 0 ]; then
        echo ""
        echo -e "${GREEN}Build successful!${NC}"
        echo -e "${CYAN}Binaries location:${NC}"
        ls -lh target/release/*-service target/release/gateway 2>/dev/null
    else
        echo -e "${RED}Build failed!${NC}"
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

# Status dashboard
status_dashboard() {
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${PURPLE}Service Status Dashboard${NC}"
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo ""
    
    # Check dependencies
    echo -e "${CYAN}Dependencies:${NC}"
    
    # PostgreSQL
    if nc -z localhost 5434 2>/dev/null; then
        echo -e "  PostgreSQL:    ${GREEN}● Running${NC} (port 5434)"
    else
        echo -e "  PostgreSQL:    ${RED}○ Stopped${NC} (port 5434)"
    fi
    
    # Redis
    if nc -z localhost 6382 2>/dev/null; then
        echo -e "  Redis:         ${GREEN}● Running${NC} (port 6382)"
    else
        echo -e "  Redis:         ${RED}○ Stopped${NC} (port 6382)"
    fi
    
    echo ""
    echo -e "${CYAN}Services:${NC}"
    
    # Service list with ports
    services=(
        "Gateway:8080"
        "Auth Service:8001"
        "Bookmarks Service:8002"
        "Import Service:8003"
        "Search Service:8004"
    )
    
    for service_info in "${services[@]}"; do
        IFS=':' read -r name port <<< "$service_info"
        if nc -z localhost $port 2>/dev/null; then
            pid=$(lsof -ti:$port 2>/dev/null)
            echo -e "  $name: ${GREEN}● Running${NC} (port $port, PID: $pid)"
        else
            echo -e "  $name: ${RED}○ Stopped${NC} (port $port)"
        fi
    done
    
    # System resources
    echo ""
    echo -e "${CYAN}System Resources:${NC}"
    echo -e "  CPU Load:  $(uptime | awk -F'load average:' '{print $2}')"
    echo -e "  Memory:    $(free -h | grep Mem | awk '{print "Used: " $3 " / Total: " $2}')"
    echo -e "  Disk:      $(df -h . | tail -1 | awk '{print "Used: " $3 " / Total: " $2 " (" $5 " used)"}')"
    
    # Recent logs
    echo ""
    echo -e "${CYAN}Recent Log Entries:${NC}"
    if [ -f "logs/services.log" ]; then
        tail -5 logs/services.log | while IFS= read -r line; do
            echo "  $line"
        done
    else
        echo "  No log file found"
    fi
    
    echo ""
    read -p "Press Enter to continue..."
}

# Main loop
main() {
    clear
    show_banner
    
    # Check prerequisites on first run
    if ! check_prerequisites; then
        exit 1
    fi
    
    while true; do
        show_menu
        read -p "Select option: " choice
        
        case $choice in
            1)
                clear
                ./scripts/start-dependencies.sh
                echo ""
                read -p "Press Enter to continue..."
                ;;
            2)
                clear
                ./scripts/run-all.sh
                ;;
            3)
                clear
                ./scripts/run-dev.sh
                ;;
            4)
                clear
                echo -e "${CYAN}Service Manager${NC}"
                echo "Usage: start|stop|restart|status|logs|health [service]"
                echo ""
                read -p "Enter command: " cmd args
                ./scripts/service-manager.sh $cmd $args
                echo ""
                read -p "Press Enter to continue..."
                ;;
            5)
                clear
                echo -e "${CYAN}Log Viewer Options:${NC}"
                echo "1) View latest log"
                echo "2) Follow log in real-time"
                echo "3) Show errors only"
                echo "4) Filter by service"
                echo ""
                read -p "Select option: " log_choice
                
                case $log_choice in
                    1) ./scripts/view-logs.sh ;;
                    2) ./scripts/view-logs.sh -f ;;
                    3) ./scripts/view-logs.sh -e ;;
                    4) 
                        read -p "Enter service name: " service
                        ./scripts/view-logs.sh -s $service
                        ;;
                esac
                ;;
            6)
                clear
                ./scripts/quick-test.sh
                echo ""
                read -p "Press Enter to continue..."
                ;;
            7)
                clear
                ./scripts/benchmark.sh
                ;;
            8)
                clear
                ./scripts/database-tools.sh
                ;;
            9)
                clear
                ./scripts/code-quality.sh
                ;;
            10)
                clear
                ./scripts/docker-build.sh
                echo ""
                read -p "Press Enter to continue..."
                ;;
            11)
                clear
                status_dashboard
                ;;
            0)
                echo -e "${GREEN}Goodbye!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option${NC}"
                sleep 1
                ;;
        esac
        
        clear
        show_banner
    done
}

# Run main function
main